#!/usr/bin/env python3 
from urllib import request
import re
import argparse
import itertools

class Node:
	def __init__(self, parent, children, tag):
		self.parent = parent
		self.children = children
		self.tag = tag
		


def bin(sentences, output):
	
	for i in sentences.readlines():
		current_sentence = i.strip()
		rootNode = None
		currentNode = None
		previousNode = None
		for state in current_sentence.split():			
		
			if(state.startswith('(')):

				currentNode = Node(previousNode, [], state.strip('('))
			
				if previousNode:
					previousNode.children.append(currentNode)
				else:
					rootNode = currentNode
				previousNode = currentNode

				
			elif(state.endswith(')')):

				previousNode.children.append(state.strip(")"))

				for _ in range(state.count(')')):
					previousNode = previousNode.parent
				
		writeTree(rootNode, 0, output)
		output.write("\n\n")


def writeTree(currentNode, nodeIndex, output):
	
	if isinstance(currentNode, Node):
		
		if currentNode.tag == "ROOT":
			output.write("(ROOT")
		
		elif currentNode.parent.children.index(currentNode) == 0:
			output.write(" (" + currentNode.tag)
		
		else:
			output.write(" (@" + currentNode.parent.tag + "->_" + 
				'_'.join([c.tag for c in currentNode.parent.children[:nodeIndex]]) 
				+ " (" + currentNode.tag)
		
		for childIndex, childNode in enumerate(currentNode.children):
			writeTree(childNode, childIndex, output)
	
		output.write(")" * (len(currentNode.children)))
	elif isinstance(currentNode, str):
		
		output.write(" " + currentNode)

if __name__ == '__main__':

	parser = argparse.ArgumentParser(add_help = False)

	parser.add_argument("-input",  dest = 'input')
	parser.add_argument("-output", dest = 'output')
	args = parser.parse_args()

	input_file = open(args.input, 'r+')
	output = open(args.output, "w")

	bin(input_file, output )


				# print(niveau)	
					